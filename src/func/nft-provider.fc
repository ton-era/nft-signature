;; TODO:
;;   - compare to SBT/Auction official code example
;;   - write schemas for storage and inbound msg requests
;;   - update TEP







;; NFT Signature Provider Smart Contract
;; For details see TEP https://github.com/ton-era/TEPs/blob/master/text/0090-tsc-standard.md.


;; -------------------------- Constants --------------------------

int const::min_gas_amount() asm "5000000 PUSHINT";  ;; 0.005 TON

int exit::wrong_withraw_sender()    asm "801 PUSHINT";
int exit::wrong_change_sender()     asm "803 PUSHINT";
int exit::already_inited()          asm "805 PUSHINT";
int exit::insuffucient_to_withraw() asm "807 PUSHINT";
int exit::incorrect_fees()          asm "808 PUSHINT";
int exit::insufficient_msg_value()  asm "810 PUSHINT";
int exit::wrong_signature_sender()  asm "811 PUSHINT";
int exit::unknown_operation()       asm "0xffff PUSHINT";


;; -------------------------- Storage --------------------------

;; stateinit
global int   version;
global int   id;
global slice owner_address;
global int   signature_commit_cnt;
global cell  signature_code;


() load_data() impure {
    slice ds = get_data().begin_parse();

    version = ds~load_uint(16);
    id = ds~load_uint(32);
    owner_address = ds~load_msg_addr();
    signature_commit_cnt = ds~load_uint(32);
    signature_code = ds~load_ref();

    return ();
}


() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(version, 16)
            .store_uint(id, 32)
            .store_slice(owner_address)
            .store_uint(signature_commit_cnt, 32)
            .store_ref(signature_code)
        .end_cell());
}


;; -------------------------- Handlers --------------------------

() handle::withraw(int my_balance, slice sender_address, slice in_msg_body) impure {
    throw_unless(exit::wrong_withraw_sender(), equal_slices(sender_address, owner_address));

    int amount = in_msg_body~load_coins();

    throw_if(exit::insuffucient_to_withraw(),
             my_balance < amount + const::min_gas_amount());

    slice to_address = in_msg_body~load_msg_addr();

    var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce
                .store_slice(to_address)
                .store_coins(amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
              .end_cell();

    send_raw_message(msg, 1); ;; paying fees, revert on errors

    return ();
}


() handle::change_owner(slice sender_address, slice in_msg_body) impure {
    throw_unless(exit::wrong_change_sender(), equal_slices(sender_address, owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    owner_address = new_owner_address;

    save_data();
}


() handle::collect_stats(slice sender_address, slice in_msg_body) impure {
    slice item_address = in_msg_body~load_msg_addr();
    slice signee_address = in_msg_body~load_msg_addr();

    cell  state_init = calculate_signature_stateinit(my_address(), item_address, signee_address, signature_code);
    slice signature_address = get_address_by_stateinit(0, state_init);

    throw_unless(exit::wrong_signature_sender(), equal_slices(sender_address, signature_address));

    signature_commit_cnt += 1;

    save_data();

    return ();
}


;; -------------------------- Internal --------------------------

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; ignore empty messages: accept coins
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    ;; ignore all bounced messages
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    load_data();

    ;; gas safeguard
    throw_unless(exit::insufficient_msg_value(), msg_value >= const::min_gas_amount());

    int op = in_msg_body~load_uint(32);

    ;; withraw coins
    if (op == op::withraw()) {
        handle::withraw(my_balance, sender_address, in_msg_body);
        return();
    }

    ;; change provider owner
    if (op == op::change_owner()) {
        handle::change_owner(sender_address, in_msg_body);
        return();
    }

    ;; collect stats
    if (op == op::notify_sign()) {
        handle::collect_stats(sender_address, in_msg_body);
        return();
    }

    throw(exit::unknown_operation());
}


() recv_external(slice in_msg) impure {
}


;; -------------------------- GET Methods --------------------------

(int, int, slice) get_info() method_id {
  load_data();
  return (version, id, owner_address);
}


(int) get_stats() method_id {
  load_data();
  return signature_commit_cnt;
}


(cell) get_sign_code() method_id {
  load_data();
  return (signature_code);
}


(slice) get_signature_address(slice item_address, slice signee_address) method_id {
  load_data();
  cell state_init = calculate_signature_stateinit(my_address(), item_address, signee_address, signature_code);
  slice signature_address = get_address_by_stateinit(0, state_init);

  return signature_address;
}
