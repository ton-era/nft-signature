;; TODO:
;;   - compare to SBT/Auction official code example
;;   - write schemas for inbound msg requests
;;   - update TEP





;; NFT Signature Smart Contract
;; For details see TEP https://github.com/ton-era/TEPs/blob/master/text/0090-tsc-standard.md.


;; -------------------------- Constants --------------------------

int const::min_gas_amount()       asm  "10000000 PUSHINT"; ;; 0.01 TON
int const::min_tons_for_storage() asm  "50000000 PUSHINT"; ;; 0.05 TON
int const::return_amount()        asm  "10000000 PUSHINT"; ;; 0.01 TON
int const::stats_amount()         asm "100000000 PUSHINT"; ;; 0.1  TON

int exit::wrong_signee_address()     asm "902 PUSHINT";
int exit::wrong_item_address()       asm "903 PUSHINT";
int exit::signee_already_approved()  asm "904 PUSHINT";
int exit::owner_already_approved()   asm "905 PUSHINT";
int exit::wrong_owner_address()      asm "906 PUSHINT";
int exit::insufficient_init_value()  asm "907 PUSHINT";
int exit::insufficient_msg_value()   asm "908 PUSHINT";
int exit::already_inited()           asm "909 PUSHINT";
int exit::unknown_operation()        asm "0xffff PUSHINT";


;; -------------------------- Storage --------------------------

;; info#_
;;    time_created:int
;;    time_owner_approved:int
;;    time_signee_approved:int = Info;
;;    item_owner_address:MsgAddress


;; payload#_
;;    content_code:uint32
;;    content:^Cell = Payload;

;; storage#_
;;    item_address:MsgAddressInt
;;    signee_address:MsgAddressInt
;;    provider_address:MsgAddressInt
;;    info:^Info
;;    payload:(Maybe ^Payload) = Storage;


;; stateinit
global slice item_address;
global slice signee_address;
global slice provider_address; 

;; state
global int   time_created;
global int   time_owner_approved;
global int   time_signee_approved;
global slice item_owner_address;
global cell  payload;


() load_data() impure {
    slice ds = get_data().begin_parse();

    item_address     = ds~load_msg_addr();
    signee_address   = ds~load_msg_addr();
    provider_address = ds~load_msg_addr();

    if (slice_refs_empty?(ds)) {  ;; not initialized yet
        time_created = 0;
        time_owner_approved  = 0;
        time_signee_approved = 0;
        item_owner_address = null();
        payload = null();

        return ();
    }

    cell info = ds~load_ref();
    slice is = info.begin_parse();
    time_created = is~load_uint(32);
    time_owner_approved  = is~load_uint(32);
    time_signee_approved = is~load_uint(32);
    item_owner_address = is~load_msg_addr();

    payload = ds~load_dict();

    return ();
}


() save_data() impure {
    cell is = begin_cell()
        .store_uint(time_created, 32)
        .store_uint(time_owner_approved, 32)
        .store_uint(time_signee_approved, 32)
        .store_nullable_msg_addr(item_owner_address)
        .end_cell();

    cell ds = begin_cell()
        .store_slice(item_address)
        .store_slice(signee_address)
        .store_slice(provider_address)
        .store_ref(is)
        .store_maybe_ref(payload)
        .end_cell();

    set_data(ds);
}


;; -------------------------- handlers --------------------------

() check_approved(int my_balance, int msg_value) impure {
    if ((time_owner_approved == 0) | (time_signee_approved == 0)) {
      return ();
    }

    int stats_amount = min(
        my_balance - const::min_tons_for_storage(),
        const::stats_amount());

    var msg = begin_cell()
          .store_uint(0x10, 6) ;; nobounce
          .store_slice(provider_address)
          .store_coins(stats_amount)
          .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
          .store_uint(op::notify_sign(), 32)
          .store_slice(item_address)
          .store_slice(signee_address);

    send_raw_message(msg.end_cell(), 1);  ;; paying fees, revert on errors

  return ();
}

() return_item(int my_balance, int msg_value, int query_id) impure {
    accept_message();

    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce
        .store_slice(item_address)
        .store_coins(const::return_amount())
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_slice(item_owner_address) ;; owner_address
        .store_uint(0, 2) ;; empty response_address;
        .store_int(0, 1)  ;; empty custom_payload
        .store_coins(0)   ;; forward amount to owner_address
        .store_int(0, 1); ;; empty forward_payload

    send_raw_message(msg.end_cell(), 1);  ;; paying fees, revert on errors

    time_owner_approved = now();
    check_approved(my_balance, msg_value);

    save_data();

    return ();
}


() handle::init(int my_balance, int msg_value, slice sender_address, slice in_msg_body) impure {
    throw_if(exit::already_inited(), time_created > 0);
    throw_if(exit::insufficient_init_value(), my_balance < const::min_tons_for_storage());

    time_created = now();
    save_data();

    return ();
}


() handle::sign(int my_balance, int msg_value, slice sender_address, slice in_msg_body) impure {
    throw_unless(exit::wrong_signee_address(), equal_slices(sender_address, signee_address));
    throw_if(exit::signee_already_approved(), time_signee_approved > 0);

    accept_message();

    int query_id = in_msg_body~load_uint(64);

    payload = in_msg_body~load_dict();

    int need_notify = in_msg_body~load_int(1);
    if (need_notify) {
        slice notify_address = in_msg_body~load_msg_addr();
        int   notify_amount  = in_msg_body~load_coins();
        cell  notify_payload = in_msg_body~load_ref();

        var msg = begin_cell()
          .store_uint(0x10, 6) ;; nobounce
          .store_slice(notify_address)
          .store_coins(notify_amount)
          .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
          .store_uint(op::sign(), 32)
          .store_uint(query_id, 64)
          .store_ref(notify_payload);

        send_raw_message(msg.end_cell(), 1);  ;; paying fees, revert on errors
    }

    time_signee_approved = now();
    check_approved(my_balance, msg_value);
    
    save_data();
}


() handle::fix(int my_balance, int msg_value, slice sender_address, slice in_msg_body) impure {
    throw_unless(exit::wrong_owner_address(), equal_slices(sender_address, item_owner_address));

    int query_id = in_msg_body~load_uint(64);
    return_item(my_balance, msg_value, query_id);

    return();
}


() handle::approve(int my_balance, int msg_value, slice sender_address, slice in_msg_body) impure {
    throw_unless(exit::wrong_item_address(), equal_slices(sender_address, item_address));
    throw_if(exit::owner_already_approved(), time_owner_approved > 0);

    int query_id = in_msg_body~load_uint(64);
    item_owner_address = in_msg_body~load_msg_addr();

    return_item(my_balance, msg_value, query_id);

    return();
}

;; -------------------------- Internal --------------------------

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; ignore empty messages: accept coins
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    ;; ignore all bounced messages
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    load_data();

    slice sender_address = cs~load_msg_addr();

    ;; gas safeguard
    throw_unless(exit::insufficient_msg_value(), msg_value >= const::min_gas_amount());

    ;; initialize contract
    if (time_created == 0) {
        handle::init(my_balance, msg_value, sender_address, in_msg_body);
    }

    if (in_msg_body.slice_bits() < 32) {
        return ();
    }

    int op = in_msg_body~load_uint(32);

    ;; just mint signature contract
    if (op == op::mint()) {
        return();
    }

    ;; approve by signee: sign
    if (op == op::sign()) {
        handle::sign(my_balance, msg_value, sender_address, in_msg_body);
        return();
    }

    ;; approve by item owner: item application
    if (op == op::ownership_assigned()) {
        handle::approve(my_balance, msg_value, sender_address, in_msg_body);
        return ();
    }

    ;; fix owner - return item to owner in case of item freeze on this contract
    if (op == op::fix_owner()) {
        handle::fix(my_balance, msg_value, sender_address, in_msg_body);
        return ();
    }

    ;; if there was response_destination upon item transfer - ignore it
    if ((op == op::excesses()) & equal_slices(sender_address, item_address)) {
        return ();
    }

    throw(exit::unknown_operation());
}


;; -------------------------- GET Methods --------------------------

(slice, slice, slice, int, int, int, cell) get_info() method_id {
  load_data();
  return (
    item_address,
    signee_address,
    provider_address,
    time_created,
    time_owner_approved,
    time_signee_approved,
    payload
  );
}